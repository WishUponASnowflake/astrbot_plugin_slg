# domain/ports.py
from typing import Protocol, Optional, Set
from .entities import MapGraph, Player


class MapProviderPort(Protocol):
    def load(self) -> MapGraph: ...


class StateRepositoryPort(Protocol):
    def init_schema(self) -> None: ...
    def get(self, key: str) -> Optional[str]: ...
    def set(self, key: str, val: str) -> None: ...
    def close(self) -> None: ...


class PlayerRepositoryPort(Protocol):
    def init_schema(self) -> None: ...
    def get_player(self, user_id: str) -> Optional[Player]: ...
    def upsert_player(self, p: Player) -> None: ...
    # 角色相关
    def list_owned_char_names(self, user_id: str) -> Set[str]: ...
    def has_char(self, user_id: str, name: str) -> bool: ...
    def add_char(self, user_id: str, name: str, level: int = 1) -> None: ...
    def get_char_level(self, user_id: str, name: str): ...
    def set_char_level(self, user_id: str, name: str, level: int): ...
    # 队伍相关
    def ensure_teams(self, user_id: str, team_count: int, slots: int): ...
    def list_team_slots(self, user_id: str, team_no: int): ...
    def set_team_slot(
        self, user_id: str, team_no: int, slot_idx: int, char_name: str | None
    ): ...
    def find_char_team(self, user_id: str, name: str): ...
    def get_team_soldiers(self, user_id: str, team_no: int) -> int: ...
    def set_team_soldiers(self, user_id: str, team_no: int, soldiers: int): ...
    # —— 同盟 —
    def get_alliance_by_name(self, name: str): ...
    def create_alliance(
        self, name: str, leader_user_id: str, created_at: int
    ) -> int: ...
    def get_user_alliance(self, user_id: str): ...
    def add_member_to_alliance(
        self, alliance_id: int, user_id: str, role: str, joined_at: int
    ): ...
    def remove_member_from_alliance(self, user_id: str): ...
    def count_alliance_members(self, alliance_id: int) -> int: ...
    def list_alliances(self): ...
    def list_alliance_members(self, alliance_id: int): ...
